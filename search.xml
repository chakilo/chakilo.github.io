<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo + GitHub Pages 搭建个人博客</title>
    <url>/posts/1233496010/</url>
    <content><![CDATA[<div class="note default"><p>你正在浏览的<a href="https://jiruffe.com/">这个博客本身</a>就是Hexo实现的。<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo<i class="fa fa-external-link-alt"></i></span>是一个“快速、简洁且高效的博客框架”，支持<code>GitHub Flavored Markdown</code>，支持主题和插件。其生成的是静态网页，可以直接部署在<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vYXJ0aWNsZXMvd2hhdC1pcy1naXRodWItcGFnZXM=">GitHub Pages<i class="fa fa-external-link-alt"></i></span>上。</p>
</div>

<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>以下都是在Mac上的操作，其他系统上可能有些不同</p>
<h2 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h2><p>Mac上的包管理工具，为了方便装其他工具，<span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNoLw==">官网<i class="fa fa-external-link-alt"></i></span>上就可以找到安装方法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>
<p>装完后可以执行下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew upgrade</span><br></pre></td></tr></table></figure>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>
<p>或者装<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3hjb2RlLw==">XCode<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><p>可以直接去<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnLw==">官网<i class="fa fa-external-link-alt"></i></span>下，这里更推荐用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NyZWF0aW9uaXgvbnZt">nvm<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br><span class="line">nvm install stable</span><br></pre></td></tr></table></figure>
<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><p>东西都安装好了！现在创建一个工作目录<code>hexo-blog</code>，然后在目录内执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>一个hexo项目就创建完成了！可以看到这样的目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo-blog&#x2F;</span><br><span class="line">├── _config.yml         # 项目的配置</span><br><span class="line">├── node_modules        # node依赖</span><br><span class="line">├── package-lock.json   # node依赖描述</span><br><span class="line">├── package.json        # node依赖描述</span><br><span class="line">├── public              # 输出的静态网站</span><br><span class="line">├── scaffolds           # 模版</span><br><span class="line">├── source              # 源码</span><br><span class="line">└── themes              # 主题</span><br></pre></td></tr></table></figure>
<p>然后用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new hello</span><br></pre></td></tr></table></figure>
<p>就可以创建出一篇标题为hello的新文章，文件在<code>./source/_post/hello.md</code></p>
<h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>文件最上方<code>---</code>包含的就是<code>Front-matter</code>，用来设置文章的标题、日期、分类、标签等属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello</span><br><span class="line">date: 2019-03-07 18:00:03</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>可以参考<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvZnJvbnQtbWF0dGVy">官方文档<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h2><p>文章内容默认用<code>Markdown</code>语法，可以看<span class="exturl" data-url="aHR0cHM6Ly9ndWlkZXMuZ2l0aHViLmNvbS9mZWF0dXJlcy9tYXN0ZXJpbmctbWFya2Rvd24v">GitHub Guides<i class="fa fa-external-link-alt"></i></span></p>
<p>想要在首页展示一个<code>阅读全文</code>按钮而不是全文展示，只需要在文章中间加入一行<code>&lt;!-- more --&gt;</code>，首页上就只会展示这个标记之前的内容了</p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>然后用浏览器打开<code>http://localhost:4000</code>就可以看到展示效果了</p>
<p>加入debug参数可以看到更多调试输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><ol>
<li><p>在GitHub上新建一个仓库，取名为<code>&lt;username&gt;.github.io</code>，<code>&lt;username&gt;</code>要替换成你自己的GitHub username</p>
</li>
<li><p>在Hexo工作目录下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li><p>打开Hexo工作目录下的<code>_config.yml</code>，找到<code>deploy</code>节点，配置成这样</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p> 同样的，<code>&lt;username&gt;</code>要替换成你自己的GitHub username</p>
</li>
<li><p>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g --d</span><br></pre></td></tr></table></figure></li>
<li><p>完成了！现在打开<code>https://&lt;username&gt;.github.io</code>就是部署好之后的博客了。</p>
<blockquote>
<p>如果想使用自己的域名</p>
<blockquote>
<ol>
<li>在<code>source</code>目录下创建一个名为<code>CNAME</code>的文件（文件名必须全大写），里面写上你的域名</li>
<li>重新执行部署</li>
<li>在你的域名服务商中增加记录值为<code>&lt;username&gt;.github.io</code>的<code>CNAME</code>解析</li>
</ol>
</blockquote>
<p>就可以啦。</p>
</blockquote>
</li>
</ol>
<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">NexT<i class="fa fa-external-link-alt"></i></span>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
  然后打开<code>_config.yml</code>将<code>theme</code>节点设置成<code>theme: next</code></li>
</ul>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NoZW56aHV0aWFuL2hleG8tYWxsLW1pbmlmaWVy">hexo-all-minifier<i class="fa fa-external-link-alt"></i></span></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install libtool automake autoconf nasm</span><br><span class="line">npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure>
<p>  可以压缩生成的html、js、css和图片</p>
<blockquote>
<p>实际用下来发现有些BUG，不要开启<code>js_concator</code>和<code>image_minifier</code>这两项功能</p>
</blockquote>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d6cGFuL2hleG8tZ2VuZXJhdG9yLXNlYXJjaA==">local-search<i class="fa fa-external-link-alt"></i></span></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>  然后编辑<code>_config.yml</code>增加</p>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>  以及修改<code>themes/next/_config.yml</code>的<code>local_search</code>节点</p>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>  可以给网站增加一个搜索功能</p>
</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>RK3399 + ALC5640 声音忽大忽小</title>
    <url>/posts/4202244361/</url>
    <content><![CDATA[<div class="note default"><p>在RK3399上使用Android 7.1，扬声器发出的声音总是忽大忽小，就像是应用程序接到了失去焦点事件<code>AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK</code>然后主动降低音量一样。</p>
</div>

<a id="more"></a>

<p>其实只要更新这部分代码然后重新打包framework即可</p>
<img data-src="/posts/4202244361/rk_commit_c8c922e8.png" class="" title="rk_commit_c8c922e8">
]]></content>
      <categories>
        <category>embed</category>
      </categories>
      <tags>
        <tag>rk3399</tag>
        <tag>alc5640</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinventing the Wheel: JSON Conversion Library (Ⅰ)</title>
    <url>/posts/1622906637/</url>
    <content><![CDATA[<div class="note default"><p>Building a Java library which implements JSON conversion between JSON strings and Java beans. The source code is available in <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ppcnVmZmUvamlyYWZmZQ==">here<i class="fa fa-external-link-alt"></i></span>.</p>
</div>

<a id="more"></a>

<h1 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h1><p>At the beginning, we may need a basic class that represents all the data types of JSON including array <code>[]</code>, object <code>&#123;&#125;</code>, value <code>112358.0</code>, and even <code>null</code> or <code>undefined</code>. It provides interfaces accessing and modifying itself or its sub-elements. Like this</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONElement <span class="title">peek</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> return the specific sub-element</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONElement <span class="title">offer</span><span class="params">(Object v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> add the value to the array</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// return the element itself for method chaining</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONElement <span class="title">offer</span><span class="params">(Object k, Object v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> add the value to the object with specified key</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// return the element itself for method chaining</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And the derived classes representing each JSON data type. Using <code>List</code> to simulate <code>[]</code>, and <code>Map</code> to simulate <code>&#123;&#125;</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONList</span> <span class="keyword">extends</span> <span class="title">JSONElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;JSONElement&gt; _sub_elements;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONMap</span> <span class="keyword">extends</span> <span class="title">JSONElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Object, JSONElement&gt; _sub_elements;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONPrimitive</span> <span class="keyword">extends</span> <span class="title">JSONElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object _value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONVoid</span> <span class="keyword">extends</span> <span class="title">JSONElement</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The singleton instance of &#123;<span class="doctag">@link</span> JSONVoid&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> JSONVoid INSTANCE = <span class="keyword">new</span> JSONVoid();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h1><p>A <code>JSON</code> class that providing methods named JS-like (<code>JSON.stringify</code>, <code>JSON.parse</code>) may helps while using.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Serializes Java &#123;<span class="doctag">@link</span> Object&#125; to &#123;<span class="doctag">@link</span> JSONElement&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o the &#123;<span class="doctag">@link</span> Object&#125; to be serialized.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the &#123;<span class="doctag">@link</span> JSONElement&#125; serialized.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONElement <span class="title">serialize</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> JSONElement) &#123;</span><br><span class="line">            <span class="keyword">return</span> (JSONElement) o;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ObjectAnalyzer.analyze(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Deserializes JSON &#123;<span class="doctag">@link</span> String&#125; to &#123;<span class="doctag">@link</span> JSONElement&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json the JSON &#123;<span class="doctag">@link</span> String&#125; to be deserialized.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the &#123;<span class="doctag">@link</span> JSONElement&#125; deserialized.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONElement <span class="title">deserialize</span><span class="params">(String json)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringAnalyzer.analyze(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Directly serializes Java &#123;<span class="doctag">@link</span> Object&#125; to JSON &#123;<span class="doctag">@link</span> String&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o the &#123;<span class="doctag">@link</span> Object&#125; to be serialized.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the JSON &#123;<span class="doctag">@link</span> String&#125; serialized.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stringify</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> JSONElement) &#123;</span><br><span class="line">            <span class="keyword">return</span> StringAnalyzer.analyze((JSONElement) o);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DirectAnalyzer.analyze(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Directly deserializes JSON &#123;<span class="doctag">@link</span> String&#125; to Java &#123;<span class="doctag">@link</span> Object&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json   the JSON &#123;<span class="doctag">@link</span> String&#125; to be deserialized.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target the target &#123;<span class="doctag">@link</span> Type&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    the target &#123;<span class="doctag">@link</span> Type&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the Java &#123;<span class="doctag">@link</span> Object&#125; deserialized.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parse</span><span class="params">(String json, Type target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Class &amp;&amp; JSONElement.class.isAssignableFrom((Class) target)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) StringAnalyzer.analyze(json);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DirectAnalyzer.analyze(json, target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So far, nothing special but that we created some contentless classes. Completing the <code>StringAnalyzer</code> and <code>ObjectAnalyzer</code> in the next posts.</p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>reinventing-the-wheel</tag>
        <tag>java</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinventing the Wheel: JSON Conversion Library (Ⅱ)</title>
    <url>/posts/2040571468/</url>
    <content><![CDATA[<div class="note default"><p>Building a Java library which implements JSON conversion between JSON strings and Java beans. The source code is available in <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ppcnVmZmUvamlyYWZmZQ==">here<i class="fa fa-external-link-alt"></i></span>.</p>
</div>

<a id="more"></a>

<h1 id="string-gt-JSONElement"><a href="#string-gt-JSONElement" class="headerlink" title="string =&gt; JSONElement"></a>string =&gt; JSONElement</h1><p>Briefly, the basic idea is creating sub-elements during the traversal of json string. So traversing the json string, handling the keywords, and expecting the time complexity to be $O(n)$.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : json.toCharArray()) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;:&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>See <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ppcnVmZmUvamlyYWZmZS9ibG9iL21hc3Rlci9zcmMvbWFpbi9qYXZhL2NvbS9qaXJ1ZmZlL2ppcmFmZmUvYW5hbHl6ZXIvU3RyaW5nQW5hbHl6ZXIuamF2YQ==">StringAnalyzer<i class="fa fa-external-link-alt"></i></span> for more details.</p>
<h1 id="JSONElement-gt-string"><a href="#JSONElement-gt-string" class="headerlink" title="JSONElement =&gt; string"></a>JSONElement =&gt; string</h1><p>Much easier than <a href="#string-gt-JSONElement">string =&gt; JSONElement</a>. Recursively read sub-elements and append its value to a <code>StringBuilder</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">analyze</span><span class="params">(JSONElement element)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (element.getType()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> LIST:</span><br><span class="line">            sb.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">            Iterator&lt;JSONElement.Entry&gt; iterator = element.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                sb.append(analyze(iterator.next().getElement()));</span><br><span class="line">                <span class="keyword">if</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    sb.append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> MAP:</span><br><span class="line">            sb.append(<span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">            Iterator&lt;JSONElement.Entry&gt; iterator1 = element.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">                JSONElement.Entry e = iterator1.next();</span><br><span class="line">                sb.append(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">                sb.append(StringUtil.escape(StringUtil.toString(e.getKey())));</span><br><span class="line">                sb.append(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">                sb.append(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">                sb.append(analyze(e.getElement()));</span><br><span class="line">                <span class="keyword">if</span> (iterator1.hasNext()) &#123;</span><br><span class="line">                    sb.append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> PRIMITIVE:</span><br><span class="line">            Object v = element.asValue();</span><br><span class="line">            <span class="keyword">if</span> (v <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                sb.append(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">                sb.append(StringUtil.escape((String) v));</span><br><span class="line">                sb.append(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(StringUtil.toString(v));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> VOID:</span><br><span class="line">            sb.append(StringUtil.NULL);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>reinventing-the-wheel</tag>
        <tag>java</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>MPU-6050 运动检测中断不触发</title>
    <url>/posts/1337781487/</url>
    <content><![CDATA[<div class="note default"><p>在使用STM32 + MPU-6050的时候，期望STM32进入停止模式后靠MPU-6050的运动检测来触发STM32的外部中断唤醒。却发现INT脚一直为高，不拉低。</p>
</div>

<a id="more"></a>

<p>根据MPU-6050的datasheet</p>
<img data-src="/posts/1337781487/mpu6050_register_56_4_0.png" class="" title="mpu6050_register_56_4_0">

<p>在初始化时配置了中断</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">MPU_Write_Byte(MPU_INTBP_CFG_REG,<span class="number">0XA0</span>);    <span class="comment">//INT引脚低电平有效</span></span><br><span class="line">MPU_Write_Byte(MPU_MDETECT_CTRL_REG,<span class="number">0X1F</span>); <span class="comment">//运动检测延时200ms</span></span><br><span class="line">MPU_Write_Byte(MPU_MOTION_DET_REG,<span class="number">0X01</span>);   <span class="comment">//运动检测中断阈值</span></span><br><span class="line">MPU_Write_Byte(MPU_INT_EN_REG,<span class="number">0X40</span>);       <span class="comment">//开启运动检测中断</span></span><br></pre></td></tr></table></figure>
<p>结果INT脚却始终为高，怎么晃动都不拉低。</p>
<p>原来是看的datasheet版本太老了，新版本已经没有这个运动检测中断了。</p>
<img data-src="/posts/1337781487/mpu6050_register_56_4_2.png" class="" title="mpu6050_register_56_4_2">

<p>于是只好在停止模式下用RTC闹钟定时检查加速度的变化。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ENTERSTOPMODE:</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启RTC闹钟 用以喂狗</span></span><br><span class="line">    IWDG_Feed();</span><br><span class="line">    dev_rtc_setAlarm(<span class="number">3</span>);</span><br><span class="line">    IWDG_Feed();</span><br><span class="line">    </span><br><span class="line">    DEBUG_MSG(<span class="string">&quot;standby mode entered\r\n&quot;</span>);</span><br><span class="line">    IWDG_Feed();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 进入停止模式</span></span><br><span class="line">    PWR_EnterSTOPMode(PWR_Regulator_LowPower, PWR_STOPEntry_WFI);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//DEBUG_MSG(&quot;standby mode exited\r\n&quot;);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是RTC闹钟唤醒的</span></span><br><span class="line">    <span class="keyword">if</span> (dev_rtc_isAlarm()) &#123;</span><br><span class="line">        <span class="comment">//DEBUG_MSG(&quot;it&#x27;s the RTC alarm, just feed watch dog\r\n&quot;);</span></span><br><span class="line">        <span class="comment">// 喂狗</span></span><br><span class="line">        IWDG_Feed();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查新的加速度</span></span><br><span class="line">        MPU_Get_Accelerometer(&amp;t_aacx,&amp;t_aacy,&amp;t_aacz);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(t_aacx-aacx)&gt;THRESHOLD_ACCELEROMETER_CHANGE || <span class="built_in">abs</span>(t_aacy-aacy)&gt;THRESHOLD_ACCELEROMETER_CHANGE || <span class="built_in">abs</span>(t_aacz-aacz)&gt;THRESHOLD_ACCELEROMETER_CHANGE) &#123;</span><br><span class="line">            <span class="comment">// 利用看门狗重启</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>) &#123;;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 喂完狗继续进入停止模式</span></span><br><span class="line">        <span class="keyword">goto</span> ENTERSTOPMODE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>embed</category>
      </categories>
      <tags>
        <tag>stm32</tag>
        <tag>mpu6050</tag>
      </tags>
  </entry>
</search>
